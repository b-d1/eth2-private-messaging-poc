/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RegistryContract,
  RegistryContractInterface,
} from "../RegistryContract";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "idCommitment",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "RegistrationEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "pubkey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "idCommitment",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610357806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d438035314610030575b600080fd5b61004361003e36600461023e565b610045565b005b603085146100c05760405162461bcd60e51b815260206004820152602760248201527f5265676973747279436f6e74726163743a20696e76616c6964207075626b657960448201527f206c656e6774680000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b602083146101365760405162461bcd60e51b815260206004820152602d60248201527f5265676973747279436f6e74726163743a20696e76616c6964206964436f6d6d60448201527f69746d656e74206c656e6774680000000000000000000000000000000000000060648201526084016100b7565b606081146101ac5760405162461bcd60e51b815260206004820152602a60248201527f5265676973747279436f6e74726163743a20696e76616c6964207369676e617460448201527f757265206c656e6774680000000000000000000000000000000000000000000060648201526084016100b7565b7fdec6e451452b5d98c585ef613f95bb61b6d8e74eb2a1da5fce610ec40f79bcc68686868686866040516101e596959493929190610301565b60405180910390a1505050505050565b60008083601f84011261020757600080fd5b50813567ffffffffffffffff81111561021f57600080fd5b60208301915083602082850101111561023757600080fd5b9250929050565b6000806000806000806060878903121561025757600080fd5b863567ffffffffffffffff8082111561026f57600080fd5b61027b8a838b016101f5565b9098509650602089013591508082111561029457600080fd5b6102a08a838b016101f5565b909650945060408901359150808211156102b957600080fd5b506102c689828a016101f5565b979a9699509497509295939492505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60608152600061031560608301888a6102d8565b82810360208401526103288187896102d8565b9050828103604084015261033d8185876102d8565b999850505050505050505056fea164736f6c6343000809000a";

export class RegistryContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RegistryContract> {
    return super.deploy(overrides || {}) as Promise<RegistryContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RegistryContract {
    return super.attach(address) as RegistryContract;
  }
  connect(signer: Signer): RegistryContract__factory {
    return super.connect(signer) as RegistryContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RegistryContractInterface {
    return new utils.Interface(_abi) as RegistryContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RegistryContract {
    return new Contract(address, _abi, signerOrProvider) as RegistryContract;
  }
}
